mean(y_hat == test_set$sex)
cutoff <- seq(61, 70)
accuracy <- map_dbl(cutoff, function(x){
y_hat <- ifelse(train_set$height > x, "Male", "Female") %>%
factor(levels = levels(test_set$sex))
mean(y_hat == train_set$sex)
})
max(accuracy)
best_cutoff <- cutoff[which.max(accuracy)]
best_cutoff
read_mnist()
?mnist
read_mnist()
mnist <- read_mnist()
View(mnist)
ncol(mnist)
?mnist
ncol(read_mnist())
library(dslabs)
library(dplyr)
library(lubridate)
data(reported_heights)
dat <- mutate(reported_heights, date_time = ymd_hms(time_stamp)) %>%
filter(date_time >= make_date(2016, 01, 25) & date_time < make_date(2016, 02, 1)) %>%
mutate(type = ifelse(day(date_time) == 25 & hour(date_time) == 8 & between(minute(date_time), 15, 30), "inclass","online")) %>%
select(sex, type)
y <- factor(dat$sex, c("Female", "Male"))
x <- dat$type
View(dat)
dat %>% filter(type == "inclass") %>% summarise(n())
dat %>% filter(type == "inclass") %>% summarise(n(sex == "Female"))
dat %>% filter(type == "inclass") %>% summarise(n(sex = "Female"))
dat %>% filter(type == "inclass") %>% summarize(n(sex))
dat %>% filter(type == "inclass") %>% filter(sex == "Female") %>% summarize(n())
26/39
dat %>% filter(type == "online") %>% filter(sex == "Female") %>% summarize(n())
dat %>% filter(type == "online") %>% summarize(n())
42/111
(26+69)/(150)
y_hat <- ifelse(dat$type = "inclass", "Female", "Male") %>% factor(levels = levels(dat$sex))
y_hat <- ifelse(dat$type == "inclass", "Female", "Male") %>% factor(levels = levels(dat$sex))
View(Y_hat)
mean(y == y_hat)
y_hat <- ifelse(dat$type == "inclass", "Female", "Male")
mean(y == y_hat)
table(a=y_hat, b=y)
library(caret)
?sensitivity
tab <- table(a=y_hat, b=y)
sensitivity(tab)
specificity(tab)
68/150
library(caret)
data(iris)
iris <- iris[-which(iris$Species=='setosa'),]
y <- iris$Species
set.seed(76)
test_index <- createDataPartition(y, times=1, p=.5, list=FALSE)
test <- iris[test_index,]
train <- iris[-test_index,]
View(train)
?seq
cutoff <- seq(1,7, by = .1)
accuracy <- map_dbl(cutoff, function(train$Sepal.Length)){}
x1 <- train$Sepal.Length
x2 <- train$Sepal.Width
x3 <- train$Petal.Length
x4 <- train$Petal.Width
accuracy <- train %>% map_dbl(cutoff, function(cutoff)){y_hat <- ifelse(x1 > cutoff, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) }
accuracy <- train %>% map_dbl(cutoff, function(cutoff)){y_hat <- ifelse(x1 > cutoff, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) }
accuracy <- train %>% map_dbl(cutoff, function(cutoff){y_hat <- ifelse(x1 > cutoff, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) + mean(y_hat == train$Species)})
library(purr)
install.packages("purr")
library(purrr)
accuracy <- train %>% sapply(cutoff, function(cutoff){y_hat <- ifelse(x1 > cutoff, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) + mean(y_hat == train$Species)})
accuracy <- train %>% sapply(cutoff, function(x){y_hat <- ifelse(x1 > x, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) + mean(y_hat == train$Species)})
cor(train$Species,train$Sepal.Length)
train %>% mutate(SpeciesNum = ifelse(Species == "versicolor",1,0))
train <- train %>% mutate(SpeciesNum = ifelse(Species == "versicolor",1,0))
cor(train$SpeciesNum, train$Sepal.Length)
cor(train$SpeciesNum, train$Sepal.Width)
cor(train$SpeciesNum, train$Petal.Length)
cor(train$SpeciesNum, train$Petal.Width)
accuracy <- train %>% map_dbl(cutoff, function(x){y_hat <- ifelse(x1 > x, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) + mean(y_hat == train$Species)})
rrang::last_error()
rlang::last_error()
accuracy <- map_dbl(cutoff, function(x){y_hat <- ifelse(x1 > x, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) + mean(y_hat == train$Species)})
accuracy <- map_dbl(cutoff, function(x){y_hat <- ifelse(x1 > x, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) mean(y_hat == train$Species)})
accuracy <- map_dbl(cutoff, function(x){y_hat <- ifelse(x1 > x, "versicolor", "virginica") %>% factor(levels = levels(test$Species)) mean(y_hat == train$Species))
cutoff <- seq(1, 7, .1)
accuracy <- map_dbl(cutoff, function(x){
y_hat <- ifelse(x1 > x, "versicolor", "virginica") |>
factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
max(accuracy)
accuracy3 <- map_dbl(cutoff, function(x){
+     y_hat <- ifelse(x3 > x, "versicolor", "virginica") |>
+         factor(levels = levels(train$Species))
+     mean(y_hat == train$Species)
})
accuracy3 <- map_dbl(cutoff, function(x){
+     y_hat <- ifelse(x3 > x, "versicolor", "virginica") |>
+         factor(levels = levels(train$Species))
+     mean(y_hat == train$Species)
+ })
cutoff <- seq(1, 7, .1)
accuracy3 <- map_dbl(cutoff, function(x){
y_hat <- ifelse(x3 > x, "versicolor", "virginica") |>
factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
best_cutoff <- cutoff[which.max(accuracy3)]
best_cutoff
max(accuracy3)
.15*98
.9*2
1.8/16.5
.85*(.98/.2)
.84*(.2/.98)
set.seed(1)
disease <- sample(c(0,1), size=1e6, replace=TRUE, prob=c(0.98,0.02))
test <- rep(NA, 1e6)
test[disease==0] <- sample(c(0,1), size=sum(disease==0), replace=TRUE, prob=c(0.90,0.10))
test[disease==1] <- sample(c(0,1), size=sum(disease==1), replace=TRUE, prob=c(0.15, 0.85))
mean(test)
.15*(.02/.11)
.15*(.02/.12)
.15*(.02/.89)
.85*(.02/.11)
.15/.02
.1545/.02
(.15-.02)/.02
(.1545-.02)/.02
library(dslabs)
data("heights")
heights %>%
mutate(height = round(height)) %>%
group_by(height) %>%
summarize(p = mean(sex == "Male")) %>%
qplot(height, p, data =.)
ps <- seq(0, 1, 0.1)
heights %>%
mutate(g = cut(height, quantile(height, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(p = mean(sex == "Male"), height = mean(height)) %>%
qplot(height, p, data =.)
Sigma <- 9*matrix(c(1,0.5,0.5,1), 2, 2)
dat <- MASS::mvrnorm(n = 10000, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
plot(dat)
ps <- seq(0, 1, 0.1)
dat %>%
mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(y = mean(y), x = mean(x)) %>%
qplot(x, y, data =.)
ps <- seq(0, 1, 0.1)
dat %>%
mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE)) %>%
summarize(y = mean(y), x = mean(x)) %>%
qplot(x, y, data =.)
0.1545455/.02
library(tidyverse)
library(caret)
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
set.seed(1)
train_test_lm <- function(dat) {train_idx <- createDataPartition(dat$y, p = 0.5, list = FALSE)
train <- dat[train_idx, ]
test <- dat[-train_idx, ] + model <- lm(y ~ x, data = train) + pred <- predict(model, newdata = test)
rmse <- RMSE(pred, test$y)
return(rmse)
}
rmse_list <- replicate(100, train_test_lm(dat))
train_test_lm <- function(dat) {
# split the data into training and testing sets
set.seed(1) # set seed for reproducibility
train_idx <- createDataPartition(dat$y, p = 0.5, list = FALSE)
train <- dat[train_idx, ]
test <- dat[-train_idx, ]
# train a linear model on the training data
model <- lm(y ~ x, data = train)
# generate predictions on the test set
pred <- predict(model, newdata = test)
# calculate the RMSE
rmse <- RMSE(pred, test$y)
return(rmse)
}
# use replicate() to run the train_test_lm function 100 times
rmse_list <- replicate(100, train_test_lm(dat))
mean(rmse_list)
sd(rmse_list)
rmse <- function(pred, obs) {
sqrt(mean((pred - obs)^2))
}
# Set up a replicate loop
nrep <- 100
rmse_vec <- vector("numeric", nrep)
for (i in 1:nrep) {
# Partition the data into training and test sets
train_idx <- createDataPartition(dat$y, p = 0.5, list = FALSE)
train_dat <- dat[train_idx,]
test_dat <- dat[-train_idx,]
# Train a linear model
lm_mod <- lm(y ~ x, data = train_dat)
# Generate predictions on the test set
preds <- predict(lm_mod, newdata = test_dat)
# Calculate RMSE
rmse_vec[i] <- rmse(preds, test_dat$y)
}
mean(rmse_vec)
sd(rmse_vec)
set.seed(1)
n <- c(100, 500, 1000, 5000, 10000)
results <- sapply(n, rmse)
colnames(results) <- c("Mean RMSE", "SD of RMSEs")
rownames(results) <- n
results
library(tidyverse)
library(caret)
my_fun <- function(n) {
# Generate data
Sigma <- 9*matrix(c(1.0, 0.5, 0.5, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = n, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
# Set up a function to calculate RMSE
rmse <- function(pred, obs) {
sqrt(mean((pred - obs)^2))
}
# Set up a replicate loop
nrep <- 100
rmse_vec <- vector("numeric", nrep)
for (i in 1:nrep) {
# Partition the data into training and test sets
train_idx <- createDataPartition(dat$y, p = 0.5, list = FALSE)
train_dat <- dat[train_idx,]
test_dat <- dat[-train_idx,]
# Train a linear model
lm_mod <- lm(y ~ x, data = train_dat)
# Generate predictions on the test set
preds <- predict(lm_mod, newdata = test_dat)
# Calculate RMSE
rmse_vec[i] <- rmse(preds, test_dat$y)
}
# Return mean and SD of RMSEs
mean_rmse <- mean(rmse_vec)
sd_rmse <- sd(rmse_vec)
return(c(mean_rmse, sd_rmse))
}
set.seed(1)
n <- c(100, 500, 1000, 5000, 10000)
results <- sapply(n, my_fun)
colnames(results) <- c("Mean RMSE", "SD of RMSEs")
rownames(results) <- n
results
set.seed(1)
n <- 100
Sigma <- 9*matrix(c(1.0, 0.95, 0.95, 1.0), 2, 2)
dat <- MASS::mvrnorm(n = 100, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
rmse <- function(pred, obs) {
sqrt(mean((pred - obs)^2))
}
# Set up a replicate loop
nrep <- 100
rmse_vec <- vector("numeric", nrep)
for (i in 1:nrep) {
# Partition the data into training and test sets
train_idx <- createDataPartition(dat$y, p = 0.5, list = FALSE)
train_dat <- dat[train_idx,]
test_dat <- dat[-train_idx,]
# Train a linear model
lm_mod <- lm(y ~ x, data = train_dat)
# Generate predictions on the test set
preds <- predict(lm_mod, newdata = test_dat)
# Calculate RMSE
rmse_vec[i] <- rmse(preds, test_dat$y)
}
# Report mean and SD of RMSEs
mean_rmse <- mean(rmse_vec)
sd_rmse <- sd(rmse_vec)
cat("Mean RMSE:", mean_rmse, "\n")
cat("SD of RMSEs:", sd_rmse)
set.seed(1)
Sigma <- matrix(c(1.0, 0.75, 0.75, 0.75, 1.0, 0.25, 0.75, 0.25, 1.0), 3, 3)
dat <- MASS::mvrnorm(n = 100, c(0, 0, 0), Sigma) %>%
data.frame() %>% setNames(c("y", "x_1", "x_2"))
cor(dat)
rmse <- function(pred, obs) {
sqrt(mean((pred - obs)^2))
}
train_idx <- createDataPartition(dat$y, p = 0.5, list = FALSE)
train_dat <- dat[train_idx,]
test_dat <- dat[-train_idx,]
lm_mod1 <- lm(y ~ x_1, data = train_dat)
preds <- predict(lm_mod, newdata = test_dat)
preds <- predict(lm_mod1, newdata = test_dat)
rmse_vec1 <- rmse(preds, test_dat$y)
lm_mod2 <- lm(y ~ x_2, data = train_dat)
preds <- predict(lm_mod1, newdata = test_dat)
rmse_vec1 <- rmse(preds, test_dat$y)
preds <- predict(lm_mod2, newdata = test_dat)
lm_mod2 <- lm(y ~ x_2, data = train_dat)
preds2 <- predict(lm_mod1, newdata = test_dat)
rmse_vec2 <- rmse(preds, test_dat$y)
lm_mod3 <- lm(y ~ x_1 + x_2, data = train_dat)
preds3 <- predict(lm_mod3, newdata = test_dat)
rmse_vec3 <- rmse(preds3, test_dat$y)
set.seed(1)
Sigma <- matrix(c(1.0, 0.75, 0.75, 0.75, 1.0, 0.95, 0.75, 0.95, 1.0), 3, 3)
dat <- MASS::mvrnorm(n = 100, c(0, 0, 0), Sigma) %>%
data.frame() %>% setNames(c("y", "x_1", "x_2"))
train_idx <- createDataPartition(dat$y, p = 0.5, list = FALSE)
train_dat <- dat[train_idx,]
test_dat <- dat[-train_idx,]
lm_mod1 <- lm(y ~ x_1, data = train_dat)
preds1 <- predict(lm_mod1, newdata = test_dat)
rmse_vec1 <- rmse(preds1, test_dat$y)
lm_mod2 <- lm(y ~ x_2, data = train_dat)
preds2 <- predict(lm_mod1, newdata = test_dat)
rmse_vec2 <- rmse(preds, test_dat$y)
lm_mod3 <- lm(y ~ x_1 + x_2, data = train_dat)
preds3 <- predict(lm_mod3, newdata = test_dat)
rmse_vec3 <- rmse(preds3, test_dat$y)
span <- 3.5
tmp <- polls_2008 %>%
crossing(center = polls_2008$day) %>%
mutate(dist = abs(day - center)) %>%
filter(dist <= span)
tmp %>% filter(center %in% c(-125, -55)) %>%
ggplot(aes(day, margin)) +
geom_point(data = polls_2008, size = 3, alpha = 0.5, color = "grey") +
geom_point(size = 2) +
geom_smooth(aes(group = center),
method = "lm", formula=y~1, se = FALSE) +
facet_wrap(~center)
span <- 7
fit <- with(polls_2008,
ksmooth(day, margin, kernel = "box", bandwidth = span))
polls_2008 %>% mutate(smooth = fit$y) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
span <- 7
fit <- with(polls_2008,
ksmooth(day, margin, kernel = "normal", bandwidth = span))
polls_2008 %>% mutate(smooth = fit$y) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
library(tidyverse)
library(lubridate)
library(purrr)
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_tibble() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>% mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
dplyr::filter(date <= "2018-05-01")
View(dat)
total_days <- diff(range(polls_2008$day))
span <- 28/total_days
fit_1 <- loess(margin ~ day, degree=1, span = span, data=polls_2008)
fit_2 <- loess(margin ~ day, span = span, data=polls_2008)
polls_2008 %>% mutate(smooth_1 = fit_1$fitted, smooth_2 = fit_2$fitted) %>%
ggplot(aes(day, margin)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth_1), color="red", lty = 2) +
geom_line(aes(day, smooth_2), color="orange", lty = 1)
polls_2008 %>% ggplot(aes(day, margin)) +
geom_point() +
geom_smooth()
fitPR <- loess(deaths ~ date, degree=1, span=60, data=dat)
span <- 60
fit_1 <- loess(deaths ~ date, degree=1, span = span, data=dat)
fitPR <- loess(deaths, date, degree=1, span=60, data=dat)
fit_1 <- loess(deaths ~ date, degree=1, span = span, data = dat)
fit_1 <- loess(dat$deaths ~ dat$date, degree=1, span = span, data = dat)
fit_1 <- loess(deaths ~ date, degree = 1, span = span, data = dat)
fitPR <- loess(deaths ~ as.numeric(date), degree=1, span=span, data=dat)
dat %>% mutate(smooth_1 = fitPR$fitted) %>% ggplot(aes(as.numeric(date), deaths)) +
+     geom_point(size = 3, alpha = .5, color = "grey") +
+     geom_line(aes(day, smooth_1), color="red", lty = 2)
dat |> mutate(smooth = fitPR$fitted) |>
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
newdat <- data.frame(date = seq(min(dat$date), max(dat$date), by = "day"))
newdat$expected_deaths <- predict(fit, newdat)
# Plot the data and the smooth curve
library(ggplot2)
ggplot(dat, aes(x = date, y = deaths)) +
geom_point() +
geom_line(data = newdat, aes(y = expected_deaths), color = "red")
dat %>% mutate(smooth = fitted(fitPR)) %>%
ggplot(aes(date, deaths)) + geom_point() + geom_line(aes(date, smooth), color = "red")
dat_clean <- dat %>%
filter(!is.na(deaths) & !is.na(date))
dat_clean %>%
mutate(smooth = fitted(fitPR)) %>%
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(date, smooth), color = "red")
dat_clean |> mutate(smooth = fitPR$fitted) |>
+     ggplot(aes(date, deaths)) +
+     geom_point(size = 3, alpha = .5, color = "grey") +
+     geom_line(aes(day, smooth), color="red")
dat_clean |> mutate(smooth = fitPR$fitted) |>
+     ggplot(aes(date, deaths)) +
+     geom_point(size = 3, alpha = .5, color = "grey") +
+     geom_line(aes(day, smooth), color="red")
dat_clean |> mutate(smooth = fitPR$fitted) |>
ggplot(aes(date, deaths)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
View(dat)
dat_clean |> mutate(smooth = fitPR$fitted) |>
ggplot(aes(as.numeric(date), deaths)) +
geom_point(size = 3, alpha = .5, color = "grey") +
geom_line(aes(day, smooth), color="red")
total_days <- diff(range(dat$date))
dat %>%
mutate(smooth = predict(fit), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
dat %>%
mutate(smooth = predict(fitPR), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
dat %>%
mutate(smooth = predict(fitPR), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
dat_clean %>%
+     mutate(smooth = predict(fitPR), day = yday(date), year = as.character(year(date))) %>%
+     ggplot(aes(day, smooth, col = year)) +
+     geom_line(lwd = 2)
dat_clean %>%
mutate(smooth = predict(fitPR), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
dat_clean %>%
mutate(smooth = predict(fitPR, as.numeric(date)), day = mday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
dat_clean %>%
mutate(smooth = predict(fitPR, as.numeric(date)), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth)) +
geom_line(lwd = 2)
dat_clean %>%
mutate(smooth = predict(fitPR, as.numeric(date)), day = yday(date), year = as.character(year(date))) %>%
ggplot(aes(day, smooth, col = year)) +
geom_line(lwd = 2)
?yday
View(fitPR)
fitPR[["fitted"]]
fitPR <- loess(deaths ~ as.numeric(date), degree=1, span=60, data=dat)
library(broom)
library(caret)
library(dslabs)
library(tidyverse)
data(mnist_27)
mnist_27$train %>% glm(y ~ x_2, family = "binomial", data = .) %>% tidy()
Fit_27 <- loess(y ~ x_2, data = mnist_27$train, degree = 1)
qplot(x_2, y, data = mnist_27$train)
?loess
fit_loess <- loess(y ~ x_2, data = mnist_27$train, degree = 1)
View(mnist_27)
library(broom)
library(caret)
library(dslabs)
library(tidyverse)
data(mnist_27)
mnist_27$train %>% glm(y ~ x_2, family = "binomial", data = .) %>% tidy()
fit_27 <- loess(y ~ x_2, degree = 1, data = mnist_27$train)
fit_27 <- loess(y ~ x_2, degree = 1, family = "binomial", data = mnist_27$train)
fit_27 <- loess(y ~ x_2, degree = 1, family = "gaussian", data = mnist_27$train)
fit_27 <- loess(mnist_27$train$y ~ x_2, degree = 1, family = "gaussian", data = mnist_27$train)
mnist_27$train$y <- as.numeric(as.character(mnist_27$train$y))
fit_27 <- loess(y ~ x_2, degree = 1, data = mnist_27$train)
pred <- predict(fit_27, newdata = mnist_27$test)
binary_pred <- ifelse(pred >= 0.5, 1, 0)
accuracy <- mean(binary_pred == mnist_27$test$y)
accuracy
pred <- predict(fit_27, newdata = mnist_27$test, type = "response")
pred_label <- ifelse(pred > 0.5, 1, 0)
accuracy <- mean(pred_label == mnist_27$test$y)
accuracy
